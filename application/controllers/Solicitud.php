<?php
/*
 * Generated by CRUDigniter v3.2
 * www.crudigniter.com
 */

class Solicitud extends CI_Controller
{
    public function __construct()
    {
        parent::__construct();
        $this->load->model('Solicitud_model');
        $this->load->model('Carrera_model');
        $this->load->model('Semestre_model');
        $this->load->library('template');
        $this->load->library('pagination');
        $this->load->helper('url');
        $this->load->helper('url_helper');
        $this->load->library('zip');

        if ($this->session->userdata('logged_in') !== true) {
            redirect('Login');
        }
    }

    /*
     * Listing of solicitudes
     */
    public function index()
    {
        $data['solicitudes'] = $this->Solicitud_model->get_all_solicitudes();

        $data['_view'] = 'solicitud/index';
        $this->load->view('layouts/main', $data);
    }

    public function vertodas()
    {
        if ($this->session->userdata('tipo_usuario') == 0) {
            $this->load->library('form_validation');

            if ($this->form_validation->run() == false) {
                echo "entro aqui";
                $data = array(
                    'title' => 'Todas las Solicitudes',
                    'solicitudes' => $this->Solicitud_model->get_all_solicitudes_with_filter($this->input->post('carrera_id'), $this->input->post('semestre_id'), $this->input->post('estado_solicitudes')),
                    'all_carreras' => $this->Carrera_model->get_all_carreras(),
                    'all_semestres' => $this->Semestre_model->get_all_semestres(),
                );
                $this->template->load('dashboard', 'Solicitud/todaslassolicitudes', $data);
            } else {
                echo "entro aqui 2222";
                $data = array(
                    'title' => 'Todas las Solicitudes',
                    'solicitudes' => $this->Solicitud_model->get_all_solicitudes(),
                    'all_carreras' => $this->Carrera_model->get_all_carreras(),
                    'all_semestres' => $this->Semestre_model->get_all_semestres(),
                );
                $this->template->load('dashboard', 'Solicitud/todaslassolicitudes', $data);
            }
        } else {
            show_error('No tienes permisos para estar acceder a esta URL. <a href="' . base_url('Home') . '">Ir al Inicio</a>');
        }
    }

    public function missolicitudes()
    {
        if ($this->session->userdata('tipo_usuario') == 1) {
            $data = array(
                'title' => 'Mis Solicitudes',
                'solicitudes' => $this->Solicitud_model->get_all_my_solicitudes($this->session->userdata('id_usuario')),
            );

            $this->template->load('dashboard', 'Solicitud/missolicitudes', $data);
        } else {
            show_error('No tienes permisos para estar acceder a esta URL. <a href="' . base_url('Home') . '">Ir al Inicio</a>');
        }
    }

    public function mipapelera()
    {
        if ($this->session->userdata('tipo_usuario') == 1) {
            $data = array(
                'title' => 'Mis Solicitudes',
                'solicitudes' => $this->Solicitud_model->get_all_my_solicitudes_inactive($this->session->userdata('id_usuario')),
            );

            $this->template->load('dashboard', 'Solicitud/mipapelera', $data);
        } else {
            show_error('No tienes permisos para estar acceder a esta URL. <a href="' . base_url('Home') . '">Ir al Inicio</a>');
        }
    }

    public function activate($id_solicitud)
    {
        # code...
        if ($this->Solicitud_model->updatestatus($id_solicitud, 0)) { //0 es activo, 1 es inactivo
            if ($this->session->userdata('tipo_usuario') == 0) {
                redirect('solicitud/vertodas');
            } else {
                redirect('solicitud/missolicitudes');
            }
        } else {
            show_error('The solicitude you are trying to delete does not exist.');
        }
    }

    public function imprimirSolicitud($id_solicitud)
    {
        $data = array(
            'title' => 'Mis Solicitudes',
            'all_carreras' => $this->Carrera_model->get_all_carreras(),
            'all_semestres' => $this->Semestre_model->get_all_semestres(),
            'solicitude' => $this->Solicitud_model->get_solicitude($id_solicitud),
            'mesinicio' => $this->Solicitud_model->getMesSolicitud($this->Solicitud_model->obtenerFechaSolicitud($id_solicitud, 1)), //1 INICIO, 2 FINAL
            'mesfinal' => $this->Solicitud_model->getMesSolicitud($this->Solicitud_model->obtenerFechaSolicitud($id_solicitud, 2)),
            'altasolicitud' => $this->Solicitud_model->getMesSolicitud($this->Solicitud_model->obtenerFechaSolicitud($id_solicitud, 3)),
        );

        //$this->load->view('Solicitud/imprimirsolicitud', $data);
        $this->template->load('dashboard', 'Solicitud/imprimirsolicitud', $data);
    }

    public function verSolicitud($id_solicitud)
    {
        $data['solicitude'] = $this->Solicitud_model->get_solicitude($id_solicitud);

        $data['all_carreras'] = $this->Carrera_model->get_all_carreras();

        $data['all_semestres'] = $this->Semestre_model->get_all_semestres();

        $data['title'] = 'Ver Solicitud';

        $data['cdp'] = $this->Solicitud_model->traerDocumento($id_solicitud, 1);
        $data['cda'] = $this->Solicitud_model->traerDocumento($id_solicitud, 2);
        $data['rm'] = $this->Solicitud_model->traerDocumento($id_solicitud, 3);
        $data['cl'] = $this->Solicitud_model->traerDocumento($id_solicitud, 4);
        $data['cf'] = $this->Solicitud_model->traerDocumento($id_solicitud, 5);

        $data['hayerror'] = false;
        $data['mensajeerror'] = '';
        $data['subidacorrecta'] = false;
        $data['mensajecorrecto'] = '';
        $data['idsolicitud'] = $id_solicitud;

        $this->template->load('dashboard', 'Solicitud/versolicitud', $data);
    }

    public function dsa($name)
    {

        $data = file_get_contents('./resources/documentos/cdp/' . $name . '.pdf');
        force_download($name, $data);

    }

    public function descargarDocumento($name, $dedonde)
    {
        if (!empty($name)) {
            //load download helper
            $this->load->helper(array('download', 'file', 'url', 'html', 'form'));

            //file path
            $file = './resources/documentos/' . $dedonde . '/' . $name;

            //download file from directory
            force_download($file, null);
        }
    }

    public function subirCDP($id_solicitud)
    {
        $config['upload_path'] = './resources/documentos/cdp/';
        $config['allowed_types'] = 'pdf';
        $config['max_size'] = 0;
        $config['max_width'] = 1024;
        $config['max_height'] = 768;

        $nombrefinalarchivo = date('Ymd_his') . '-' . $this->session->userdata('id_usuario');

        $config['file_name'] = $nombrefinalarchivo;

        $this->load->library('upload', $config);

        if (!$this->upload->do_upload('document')) {

            $data['title'] = 'Resultados de Subida';
            $data['hayerror'] = true;
            $data['mensajeerror'] = $this->upload->display_errors();
            $data['subidacorrecta'] = false;
            $data['mensajecorrecto'] = '';
            $data['idsolicitud'] = $id_solicitud;

            //$this->load->view('upload_form', $data);
            $this->template->load('dashboard', 'Solicitud/resultadosubidadocumento', $data);
        } else {

            if ($this->input->post('qg') == 0) {
                $this->Solicitud_model->agregarDocumentoDB($id_solicitud, $nombrefinalarchivo . '.pdf', 1);
            } else {
                $this->Solicitud_model->actualizarDocumentoDB($id_solicitud, $nombrefinalarchivo . '.pdf', 1);
            }

            $data['title'] = 'Resultados de Subida';
            $data['hayerror'] = false;
            $data['mensajeerror'] = '';
            $data['subidacorrecta'] = true;
            $data['mensajecorrecto'] = 'Documento cargado!';
            $data['idsolicitud'] = $id_solicitud;

            //$this->load->view('upload_form', $data);
            $this->template->load('dashboard', 'Solicitud/resultadosubidadocumento', $data);
        }
    }

    public function subirCDA($id_solicitud)
    {
        $config['upload_path'] = './resources/documentos/cda/';
        $config['allowed_types'] = 'pdf';
        $config['max_size'] = 0;
        $config['max_width'] = 1024;
        $config['max_height'] = 768;

        $nombrefinalarchivo = date('Ymd_his') . '-' . $this->session->userdata('id_usuario');

        $config['file_name'] = $nombrefinalarchivo;

        $this->load->library('upload', $config);

        if (!$this->upload->do_upload('document')) {

            $data['title'] = 'Resultados de Subida';
            $data['hayerror'] = true;
            $data['mensajeerror'] = $this->upload->display_errors();
            $data['subidacorrecta'] = false;
            $data['mensajecorrecto'] = '';
            $data['idsolicitud'] = $id_solicitud;

            //$this->load->view('upload_form', $data);
            $this->template->load('dashboard', 'Solicitud/resultadosubidadocumento', $data);
        } else {

            if ($this->input->post('qg') == 0) {
                $this->Solicitud_model->agregarDocumentoDB($id_solicitud, $nombrefinalarchivo . '.pdf', 2);
            } else {
                $this->Solicitud_model->actualizarDocumentoDB($id_solicitud, $nombrefinalarchivo . '.pdf', 2);
            }

            $data['title'] = 'Resultados de Subida';
            $data['hayerror'] = false;
            $data['mensajeerror'] = '';
            $data['subidacorrecta'] = true;
            $data['mensajecorrecto'] = 'Documento cargado!';
            $data['idsolicitud'] = $id_solicitud;

            //$this->load->view('upload_form', $data);
            $this->template->load('dashboard', 'Solicitud/resultadosubidadocumento', $data);
        }
    }

    public function subirRM($id_solicitud)
    {
        $config['upload_path'] = './resources/documentos/rm/';
        $config['allowed_types'] = 'zip';
        $config['max_size'] = 0;
        $config['max_width'] = 1024;
        $config['max_height'] = 768;

        $nombrefinalarchivo = date('Ymd_his') . '-' . $this->session->userdata('id_usuario');

        $config['file_name'] = $nombrefinalarchivo;

        $this->load->library('upload', $config);

        if (!$this->upload->do_upload('document')) {

            $data['title'] = 'Resultados de Subida';
            $data['hayerror'] = true;
            $data['mensajeerror'] = $this->upload->display_errors();
            $data['subidacorrecta'] = false;
            $data['mensajecorrecto'] = '';
            $data['idsolicitud'] = $id_solicitud;

            //$this->load->view('upload_form', $data);
            $this->template->load('dashboard', 'Solicitud/resultadosubidadocumento', $data);
        } else {

            if ($this->input->post('qg') == 0) {
                $this->Solicitud_model->agregarDocumentoDB($id_solicitud, $nombrefinalarchivo . '.zip', 3);
            } else {
                $this->Solicitud_model->actualizarDocumentoDB($id_solicitud, $nombrefinalarchivo . '.zip', 3);
            }

            $data['title'] = 'Resultados de Subida';
            $data['hayerror'] = false;
            $data['mensajeerror'] = '';
            $data['subidacorrecta'] = true;
            $data['mensajecorrecto'] = 'Documento cargado!';
            $data['idsolicitud'] = $id_solicitud;

            //$this->load->view('upload_form', $data);
            $this->template->load('dashboard', 'Solicitud/resultadosubidadocumento', $data);
        }
    }

    public function subirCL($id_solicitud)
    {
        $config['upload_path'] = './resources/documentos/cl/';
        $config['allowed_types'] = 'pdf';
        $config['max_size'] = 0;
        $config['max_width'] = 1024;
        $config['max_height'] = 768;

        $nombrefinalarchivo = date('Ymd_his') . '-' . $this->session->userdata('id_usuario');

        $config['file_name'] = $nombrefinalarchivo;

        $this->load->library('upload', $config);

        if (!$this->upload->do_upload('document')) {

            $data['title'] = 'Resultados de Subida';
            $data['hayerror'] = true;
            $data['mensajeerror'] = $this->upload->display_errors();
            $data['subidacorrecta'] = false;
            $data['mensajecorrecto'] = '';
            $data['idsolicitud'] = $id_solicitud;

            //$this->load->view('upload_form', $data);
            $this->template->load('dashboard', 'Solicitud/resultadosubidadocumento', $data);
        } else {

            if ($this->input->post('qg') == 0) {
                $this->Solicitud_model->agregarDocumentoDB($id_solicitud, $nombrefinalarchivo . '.pdf', 4);
            } else {
                $this->Solicitud_model->actualizarDocumentoDB($id_solicitud, $nombrefinalarchivo . '.pdf', 4);
            }

            $data['title'] = 'Resultados de Subida';
            $data['hayerror'] = false;
            $data['mensajeerror'] = '';
            $data['subidacorrecta'] = true;
            $data['mensajecorrecto'] = 'Documento cargado!';
            $data['idsolicitud'] = $id_solicitud;

            //$this->load->view('upload_form', $data);
            $this->template->load('dashboard', 'Solicitud/resultadosubidadocumento', $data);
        }
    }

    public function subirCF($id_solicitud)
    {
        $config['upload_path'] = './resources/documentos/cf/';
        $config['allowed_types'] = 'pdf';
        $config['max_size'] = 0;
        $config['max_width'] = 1024;
        $config['max_height'] = 768;

        $nombrefinalarchivo = date('Ymd_his') . '-' . $this->session->userdata('id_usuario');

        $config['file_name'] = $nombrefinalarchivo;

        $this->load->library('upload', $config);

        if (!$this->upload->do_upload('document')) {

            $data['title'] = 'Resultados de Subida';
            $data['hayerror'] = true;
            $data['mensajeerror'] = $this->upload->display_errors();
            $data['subidacorrecta'] = false;
            $data['mensajecorrecto'] = '';
            $data['idsolicitud'] = $id_solicitud;

            //$this->load->view('upload_form', $data);
            $this->template->load('dashboard', 'Solicitud/resultadosubidadocumento', $data);
        } else {

            if ($this->input->post('qg') == 0) {
                $this->Solicitud_model->agregarDocumentoDB($id_solicitud, $nombrefinalarchivo . '.pdf', 5);
            } else {
                $this->Solicitud_model->actualizarDocumentoDB($id_solicitud, $nombrefinalarchivo . '.pdf', 5);
            }

            $data['title'] = 'Resultados de Subida';
            $data['hayerror'] = false;
            $data['mensajeerror'] = '';
            $data['subidacorrecta'] = true;
            $data['mensajecorrecto'] = 'Documento cargado!';
            $data['idsolicitud'] = $id_solicitud;

            //$this->load->view('upload_form', $data);
            $this->template->load('dashboard', 'Solicitud/resultadosubidadocumento', $data);
        }
    }

    /*
     * Adding a new solicitude
     */
    public function add()
    {
        $this->load->library('form_validation');

        $this->form_validation->set_rules('carrera_id', 'Carrera Id', 'required');
        $this->form_validation->set_rules('semestre_id', 'Semestre Id', 'required');
        $this->form_validation->set_rules('nombres_alumno_solicitud', 'Nombres Alumno Solicitud', 'required');
        $this->form_validation->set_rules('apellidos_alumno_solicitud', 'Apellidos Alumno Solicitud', 'required');
        $this->form_validation->set_rules('matricula_solicitud', 'Matricula Solicitud', 'required|min_length[8]');
        $this->form_validation->set_rules('nombre_empresa_solicitud', 'Nombre Empresa Solicitud', 'required');
        $this->form_validation->set_rules('nombre_dirigido_solicitud', 'Nombre Dirigido Solicitud', 'required');
        $this->form_validation->set_rules('puesto_solicitud', 'Puesto Solicitud', 'required');
        $this->form_validation->set_rules('horario_solicitud', 'Horario Solicitud', 'required');
        $this->form_validation->set_rules('nombre_proyecto_solicitud', 'Nombre Proyecto Solicitud', 'required');
        $this->form_validation->set_rules('nombre_jefe_solicitud', 'Nombre Jefe Solicitud', 'required');
        $this->form_validation->set_rules('cargo_jefe_solicitud', 'Cargo Jefe Solicitud', 'required');
        $this->form_validation->set_rules('celular_alumno_solicitud', 'Celular Alumno Solicitud', 'required');
        $this->form_validation->set_rules('correo_alumno_solicitud', 'Correo Alumno Solicitud', 'required|valid_email');
        $this->form_validation->set_rules('fecha_inicio_soliciud', 'Fecha Inicio Soliciud', 'required');
        $this->form_validation->set_rules('fecha_final_solicitud', 'Fecha Final Solicitud', 'required|callback_validate3months[' . $this->input->post('fecha_inicio_soliciud') . ']');
        $this->form_validation->set_rules('conocimiento_solicitud', 'Conocimiento Solicitud', 'required');
        $this->form_validation->set_rules('descripcion_solicitud', 'Descripcion Solicitud', 'required');

        if ($this->form_validation->run() == true) {
            $params = array(
                'id_solicitud' => null,
                'carrera_id' => $this->input->post('carrera_id'),
                'semestre_id' => $this->input->post('semestre_id'),
                'estado_solicitud' => 1,
                'status_solicitud' => 0,
                'nombres_alumno_solicitud' => $this->input->post('nombres_alumno_solicitud'),
                'apellidos_alumno_solicitud' => $this->input->post('apellidos_alumno_solicitud'),
                'matricula_solicitud' => $this->input->post('matricula_solicitud'),
                'nombre_empresa_solicitud' => $this->input->post('nombre_empresa_solicitud'),
                'nombre_dirigido_solicitud' => $this->input->post('nombre_dirigido_solicitud'),
                'puesto_solicitud' => $this->input->post('puesto_solicitud'),
                'horario_solicitud' => $this->input->post('horario_solicitud'),
                'nombre_proyecto_solicitud' => $this->input->post('nombre_proyecto_solicitud'),
                'nombre_jefe_solicitud' => $this->input->post('nombre_jefe_solicitud'),
                'cargo_jefe_solicitud' => $this->input->post('cargo_jefe_solicitud'),
                'celular_alumno_solicitud' => $this->input->post('celular_alumno_solicitud'),
                'correo_alumno_solicitud' => $this->input->post('correo_alumno_solicitud'),
                'fecha_inicio_soliciud' => $this->input->post('fecha_inicio_soliciud'),
                'fecha_final_solicitud' => $this->input->post('fecha_final_solicitud'),
                'fecha_alta_solicitud' => date('Y-m-d'),
                'conocimiento_solicitud' => $this->input->post('conocimiento_solicitud'),
                'descripcion_solicitud' => $this->input->post('descripcion_solicitud'),
                'usuario_id ' => $this->session->userdata('id_usuario'),
            );

            $solicitude_id = $this->Solicitud_model->add_solicitude($params);
            redirect('solicitud/missolicitudes');
        } else {
            $data = array(
                'title' => 'Mis Solicitudes',
                'all_carreras' => $this->Carrera_model->get_all_carreras(),
                'all_semestres' => $this->Semestre_model->get_all_semestres(),
            );

            $this->template->load('dashboard', 'Solicitud/agregarnuevasolicitud', $data);
        }
    }

    public function validate3months($fechafinal, $fechainicio)
    {

        $date1 = $fechainicio;
        $date2 = $fechafinal;

        $ts1 = strtotime($date1);
        $ts2 = strtotime($date2);

        $year1 = date('Y', $ts1);
        $year2 = date('Y', $ts2);

        $month1 = date('m', $ts1);
        $month2 = date('m', $ts2);

        $diff = (($year2 - $year1) * 12) + ($month2 - $month1);
        echo $diff;
        if ($diff >= 3) {

            return true;

        } else {

            $this->form_validation->set_message('validate3months', ' %s Necesita ser 3 meses minimo.');

            return false;

        }
    }

    /*
     * Editing a solicitude
     */
    public function edit($id_solicitud)
    {
        // check if the solicitude exists before trying to edit it
        $data['solicitude'] = $this->Solicitud_model->get_solicitude($id_solicitud);

        if (isset($data['solicitude']['id_solicitud'])) {
            $this->load->library('form_validation');

            if ($this->session->userdata('tipo_usuario') == 0) {
                $this->form_validation->set_rules('carrera_id', 'Carrera Id', 'required');
                $this->form_validation->set_rules('semestre_id', 'Semestre Id', 'required');
                $this->form_validation->set_rules('nombres_alumno_solicitud', 'Nombres Alumno Solicitud', 'required');
                $this->form_validation->set_rules('apellidos_alumno_solicitud', 'Apellidos Alumno Solicitud', 'required');
                $this->form_validation->set_rules('matricula_solicitud', 'Matricula Solicitud', 'required|min_length[8]');
                $this->form_validation->set_rules('nombre_empresa_solicitud', 'Nombre Empresa Solicitud', 'required');
                $this->form_validation->set_rules('nombre_dirigido_solicitud', 'Nombre Dirigido Solicitud', 'required');
                $this->form_validation->set_rules('puesto_solicitud', 'Puesto Solicitud', 'required');
                $this->form_validation->set_rules('horario_solicitud', 'Horario Solicitud', 'required');
                $this->form_validation->set_rules('nombre_proyecto_solicitud', 'Nombre Proyecto Solicitud', 'required');
                $this->form_validation->set_rules('nombre_jefe_solicitud', 'Nombre Jefe Solicitud', 'required');
                $this->form_validation->set_rules('cargo_jefe_solicitud', 'Cargo Jefe Solicitud', 'required');
                $this->form_validation->set_rules('celular_alumno_solicitud', 'Celular Alumno Solicitud', 'required');
                $this->form_validation->set_rules('correo_alumno_solicitud', 'Correo Alumno Solicitud', 'required|valid_email');
                $this->form_validation->set_rules('fecha_inicio_soliciud', 'Fecha Inicio Soliciud', 'required');
                $this->form_validation->set_rules('fecha_final_solicitud', 'Fecha Final Solicitud', 'required|callback_validate3months[' . $this->input->post('fecha_inicio_soliciud') . ']');
                $this->form_validation->set_rules('conocimiento_solicitud', 'Conocimiento Solicitud', 'required');
                $this->form_validation->set_rules('descripcion_solicitud', 'Descripcion Solicitud', 'required');
                $this->form_validation->set_rules('estado_solicitud', 'Estado Solicitud', 'required');
            } else {
                $this->form_validation->set_rules('carrera_id', 'Carrera Id', 'required');
                $this->form_validation->set_rules('semestre_id', 'Semestre Id', 'required');
                $this->form_validation->set_rules('nombres_alumno_solicitud', 'Nombres Alumno Solicitud', 'required');
                $this->form_validation->set_rules('apellidos_alumno_solicitud', 'Apellidos Alumno Solicitud', 'required');
                $this->form_validation->set_rules('matricula_solicitud', 'Matricula Solicitud', 'required|min_length[8]');
                $this->form_validation->set_rules('nombre_empresa_solicitud', 'Nombre Empresa Solicitud', 'required');
                $this->form_validation->set_rules('nombre_dirigido_solicitud', 'Nombre Dirigido Solicitud', 'required');
                $this->form_validation->set_rules('puesto_solicitud', 'Puesto Solicitud', 'required');
                $this->form_validation->set_rules('horario_solicitud', 'Horario Solicitud', 'required');
                $this->form_validation->set_rules('nombre_proyecto_solicitud', 'Nombre Proyecto Solicitud', 'required');
                $this->form_validation->set_rules('nombre_jefe_solicitud', 'Nombre Jefe Solicitud', 'required');
                $this->form_validation->set_rules('cargo_jefe_solicitud', 'Cargo Jefe Solicitud', 'required');
                $this->form_validation->set_rules('celular_alumno_solicitud', 'Celular Alumno Solicitud', 'required');
                $this->form_validation->set_rules('correo_alumno_solicitud', 'Correo Alumno Solicitud', 'required|valid_email');
                $this->form_validation->set_rules('fecha_inicio_soliciud', 'Fecha Inicio Soliciud', 'required');
                $this->form_validation->set_rules('fecha_final_solicitud', 'Fecha Final Solicitud', 'required|callback_validate3months[' . $this->input->post('fecha_inicio_soliciud') . ']');
                $this->form_validation->set_rules('conocimiento_solicitud', 'Conocimiento Solicitud', 'required');
                $this->form_validation->set_rules('descripcion_solicitud', 'Descripcion Solicitud', 'required');
            }

            if ($this->form_validation->run()) {

                if ($this->session->userdata('tipo_usuario') == 0) {
                    $params = array(
                        'carrera_id' => $this->input->post('carrera_id'),
                        'semestre_id' => $this->input->post('semestre_id'),
                        'estado_solicitud' => $this->input->post('estado_solicitud'),
                        'nombres_alumno_solicitud' => $this->input->post('nombres_alumno_solicitud'),
                        'apellidos_alumno_solicitud' => $this->input->post('apellidos_alumno_solicitud'),
                        'matricula_solicitud' => $this->input->post('matricula_solicitud'),
                        'nombre_empresa_solicitud' => $this->input->post('nombre_empresa_solicitud'),
                        'nombre_dirigido_solicitud' => $this->input->post('nombre_dirigido_solicitud'),
                        'puesto_solicitud' => $this->input->post('puesto_solicitud'),
                        'horario_solicitud' => $this->input->post('horario_solicitud'),
                        'nombre_proyecto_solicitud' => $this->input->post('nombre_proyecto_solicitud'),
                        'nombre_jefe_solicitud' => $this->input->post('nombre_jefe_solicitud'),
                        'cargo_jefe_solicitud' => $this->input->post('cargo_jefe_solicitud'),
                        'celular_alumno_solicitud' => $this->input->post('celular_alumno_solicitud'),
                        'correo_alumno_solicitud' => $this->input->post('correo_alumno_solicitud'),
                        'fecha_inicio_soliciud' => $this->input->post('fecha_inicio_soliciud'),
                        'fecha_final_solicitud' => $this->input->post('fecha_final_solicitud'),
                        'conocimiento_solicitud' => $this->input->post('conocimiento_solicitud'),
                        'descripcion_solicitud' => $this->input->post('descripcion_solicitud'),
                    );
                } else {
                    $params = array(
                        'carrera_id' => $this->input->post('carrera_id'),
                        'semestre_id' => $this->input->post('semestre_id'),
                        'nombres_alumno_solicitud' => $this->input->post('nombres_alumno_solicitud'),
                        'apellidos_alumno_solicitud' => $this->input->post('apellidos_alumno_solicitud'),
                        'matricula_solicitud' => $this->input->post('matricula_solicitud'),
                        'nombre_empresa_solicitud' => $this->input->post('nombre_empresa_solicitud'),
                        'nombre_dirigido_solicitud' => $this->input->post('nombre_dirigido_solicitud'),
                        'puesto_solicitud' => $this->input->post('puesto_solicitud'),
                        'horario_solicitud' => $this->input->post('horario_solicitud'),
                        'nombre_proyecto_solicitud' => $this->input->post('nombre_proyecto_solicitud'),
                        'nombre_jefe_solicitud' => $this->input->post('nombre_jefe_solicitud'),
                        'cargo_jefe_solicitud' => $this->input->post('cargo_jefe_solicitud'),
                        'celular_alumno_solicitud' => $this->input->post('celular_alumno_solicitud'),
                        'correo_alumno_solicitud' => $this->input->post('correo_alumno_solicitud'),
                        'fecha_inicio_soliciud' => $this->input->post('fecha_inicio_soliciud'),
                        'fecha_final_solicitud' => $this->input->post('fecha_final_solicitud'),
                        'conocimiento_solicitud' => $this->input->post('conocimiento_solicitud'),
                        'descripcion_solicitud' => $this->input->post('descripcion_solicitud'),
                    );
                }

                $this->Solicitud_model->update_solicitude($id_solicitud, $params);
                redirect('solicitud/edit/' . $id_solicitud);
            } else {
                $this->load->model('Carrera_model');
                $data['all_carreras'] = $this->Carrera_model->get_all_carreras();

                $this->load->model('Semestre_model');
                $data['all_semestres'] = $this->Semestre_model->get_all_semestres();

                $data['title'] = 'Editar Solicitud';

                $this->template->load('dashboard', 'Solicitud/editarsolicitud', $data);

            }
        } else {
            show_error('The solicitude you are trying to edit does not exist.');
        }

    }

    /*
     * Deleting solicitude
     */
    public function remove($id_solicitud)
    {
        $solicitude = $this->Solicitud_model->get_solicitude($id_solicitud);

        // check if the solicitude exists before trying to delete it
        if (isset($solicitude['id_solicitud'])) {
            $this->Solicitud_model->delete_solicitude($id_solicitud);
            redirect('solicitud/index');
        } else {
            show_error('The solicitude you are trying to delete does not exist.');
        }

    }

    public function enviarAPapelera($id_solicitud)
    {
        # code...
        if ($this->Solicitud_model->updatestatus($id_solicitud, 1)) { //0 es activo, 1 es inactivo
            if ($this->session->userdata('tipo_usuario') == 0) {
                redirect('solicitud/vertodas');
            } else {
                redirect('solicitud/missolicitudes');
            }

        } else {
            show_error('The solicitude you are trying to delete does not exist.');
        }
    }

    public function papeleradereciclaje()
    {
        if ($this->session->userdata('tipo_usuario') == 0) {
            $data = array(
                'title' => 'Mis Solicitudes',
                'solicitudes' => $this->Solicitud_model->get_all_solicitudes_inactive(),
            );

            $this->template->load('dashboard', 'Solicitud/mipapelera', $data);
        } else {
            show_error('No tienes permisos para estar acceder a esta URL. <a href="' . base_url('Home') . '">Ir al Inicio</a>');
        }
    }

    public function descargarZIP($id_solicitud)
    {
        // File path
        $nombre_cdp = $this->Solicitud_model->traerDocumento($id_solicitud, 1);
        $nombre_cda = $this->Solicitud_model->traerDocumento($id_solicitud, 2);
        $nombre_rm = $this->Solicitud_model->traerDocumento($id_solicitud, 3);
        $nombre_cl = $this->Solicitud_model->traerDocumento($id_solicitud, 4);
        $nombre_cf = $this->Solicitud_model->traerDocumento($id_solicitud, 5);

        $filepath = FCPATH . '/resources/documentos/';

        if ($nombre_cdp != "NOHAY") {
            $this->zip->read_file($filepath . 'cdp/' . $nombre_cdp[0]['nombre_documento']);
        }

        if ($nombre_cda != "NOHAY") {
            $this->zip->read_file($filepath . 'cda/' . $nombre_cda[0]['nombre_documento']);
        }

        if ($nombre_rm != "NOHAY") {
            $this->zip->read_file($filepath . 'rm/' . $nombre_rm[0]['nombre_documento']);
        }

        if ($nombre_cl != "NOHAY") {
            $this->zip->read_file($filepath . 'cl/' . $nombre_cl[0]['nombre_documento']);
        }

        if ($nombre_cf != "NOHAY") {
            $this->zip->read_file($filepath . 'cf/' . $nombre_cf[0]['nombre_documento']);
        }

        // Download
        $filename = "Documentos-" . date('Ymd_his');
        $this->zip->download($filename);
    }

    public function realizarinforme()
    {
        if ($this->session->userdata('tipo_usuario') == 0) {
            $data = array(
                'title' => 'Panel para generar Informes',
            );

            $this->template->load('dashboard', 'Solicitud/informes', $data);
        } else {
            show_error('No tienes permisos para estar acceder a esta URL. <a href="' . base_url('Home') . '">Ir al Inicio</a>');
        }

    }

    public function enviarEmail()
    {
        $this->load->config('email');
        $this->load->library('email');

        $from = 'computo@modelo.edu.mx';
        $to = 'manuel.canul109@gmail.com';
        $subject = 'Nueva Solcitud de Practicas Profesionales';
        $message = $this->input->post('message');

        $this->email->set_newline("\r\n");
        $this->email->from($from);
        $this->email->to($to);

        $data = array(
            'userName' => 'Anil Kumar Panigrahi',
        );

        $this->email->subject($subject);
        
        $body = $this->load->view('template/t_email.php', $data, true);

        $this->email->message($body);

        if ($this->email->send()) {
            echo 'Your Email has successfully been sent.';
        } else {
            show_error($this->email->print_debugger());
        }
    }

    public function htmlmail()
    {

        $config = array(
            'protocol' => 'sendmail',
            'smtp_host' => 'your domain SMTP host',
            'smtp_port' => 25,
            'smtp_user' => 'SMTP Username',
            'smtp_pass' => 'SMTP Password',
            'smtp_timeout' => '4',
            'mailtype' => 'html',
            'charset' => 'iso-8859-1',
        );

        $this->load->library('email', $config);
        $this->email->set_newline("\r\n");
        $this->email->from('your mail id', 'Anil Labs');

        $data = array(
            'userName' => 'Anil Kumar Panigrahi',
        );

        $this->email->to($userEmail); // replace it with receiver mail id
        $this->email->subject($subject); // replace it with relevant subject
        $body = $this->load->view('emails/anillabs.php', $data, true);
        $this->email->message($body);
        $this->email->send();
    }
}
